# Default values for scalegrid.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

globals:
  kube-prometheus-stack:
    additionalPrometheusRulesMap: 
      rule-name:
        groups:
        - name: ruleset
          rules:
          - alert: InstanceDown
            expr: up == 0
            for: 1m
            labels:
              severity: page
            annotations:
              summary: "Instance {{ $labels.instance }} down"
              description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute."
    alertmanager:
      config:
        global:
          route:
            receiver: 'email-me'
            routes:
            - receiver: email-me
              continue: true
          receivers:
          - name: 'email-me'
            email_configs:
            - to: juansealbuja@gmail.com
              from: juansealbuja@gmail.com
              smarthost: smtp.gmail.com:587
              auth_username: "juansealbuja@gmail.com"
              auth_identity: "juansealbuja@gmail.com"
              #auth_password: "aqhnzejuivmdgtbu"
      #alertmanagerSpec:
        #replicas: 2
    prometheus:
      additionalScrapeConfigs:
      - job_name: postgresql-ha-postgresql-metrics
        static_configs:
        - targets: ['postgresql-ha-postgresql-metrics:9187']
  postgresql-ha:
    postgresql:
      pgHbaTrustAll: true
      livenessProbe:
        initialDelaySeconds: 120
      readinessProbe:
        initialDelaySeconds: 120
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true
        #namespace: "scalegrid"

#scalegrid-db bitnami/postgresql-ha -n scalegrid --set postgresql.pgHbaTrustAll=true --set postgresql.livenessProbe.initialDelaySeconds=120 --set postgresql.readinessProbe.initialDelaySeconds=120 --set postgresql.persistence.existingClaim=postgresql-pv-claim --set postgresql.volumePermissions.enabled=true  --set metrics.enabled=true --set metrics.serviceMonitor.enabled=true --set metrics.serviceMonitor.namespace=scalegrid
