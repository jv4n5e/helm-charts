### Pod scheduling
# Alertmanager (2) -> private
# Grafana (3) -> public
# Prometheus Operator (1) -> private
# Postgres (7) -> public
# Prometheus (2) -> private
# 5 private
# 10 public

#postgres -> public 1a
#eks.amazonaws.com/nodegroup=public-node-group-demo
#topology.kubernetes.io/zone=af-south-1a

#grafana, alertman, prom -> public any AZ
#eks.amazonaws.com/nodegroup=public-node-group-demo

#Rest of pods -> private 1a and 1b
#eks.amazonaws.com/nodegroup=private-node-group-demo

cd terraform/env/demo
terraform apply
cd ../../plan
terraform apply

kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagerconfigs.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_probes.yaml
kubectl create -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.63.0/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml

# minikube start

helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add grafana https://grafana.github.io/helm-charts

cd ../helm-charts/helmfile
# install helmfile and run 'helmfile init'
helmfile init

### Clean the cluster
helmfile destroy
kubectl delete pvc data-postgresql-ha-postgresql-0
kubectl delete pvc data-postgresql-ha-postgresql-1
kubectl delete pvc data-postgresql-ha-postgresql-2
kubectl delete pv postgresql-ha-pv-a
kubectl delete pv postgresql-ha-pv-b
kubectl delete pv postgresql-ha-pv-c

############################ PRESENTATION STARTING POINT! ######################
kubectl apply -f postgres-storage.yaml
helmfile apply
kubectl apply -f loadbalancer.yaml

# kubectl delete service kps-prom-alertman-ext
# kubectl expose service kube-prometheus-stack-alertmanager --type=NodePort --target-port=9093 --name kps-prom-alertman-ext
# minikube service kps-prom-alertman-ext
# kubectl delete service kps-prom-ext
# kubectl expose service kube-prometheus-stack-prometheus --type=NodePort --target-port=9090 --name kps-prom-ext
# minikube service prom-ext
# kubectl delete service kps-grafana-ext
# kubectl expose service kube-prometheus-stack-grafana --type=NodePort --target-port=3000 --name=kps-grafana-ext
# minikube service kps-grafana-ext 

# The default admin password for grafana in kps is 'prom-operator'.
kubectl get secret --namespace default prom-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

# To connect to the DB from within the cluster, execute below:
export POSTGRES_PASSWORD=$(kubectl get secret --namespace default postgresql-ha-postgresql -o jsonpath="{.data.password}" | base64 -d)
kubectl run postgresql-ha-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgresql-ha-pgpool -p 5432 -U postgres

# Dummy table with data
CREATE TABLE "myTableTwo" (
  id SERIAL PRIMARY KEY,
  name varchar(255) default NULL,
  phone varchar(100) default NULL,
  email varchar(255) default NULL,
  address varchar(255) default NULL);
INSERT INTO "myTable" (name,phone,email,address)
VALUES
  ('Unity Whitney','1-491-643-8945','elit@hotmail.com','389-2468 Risus. Ave'),
  ('Oscar Pope','1-776-495-1747','sem.egestas@protonmail.com','P.O. Box 239, 5230 Aliquet Rd.'),
  ('Imogene Alvarez','1-347-457-6346','metus@hotmail.edu','757 Malesuada Street'),
  ('Emmanuel Chaney','(352) 732-8536','ut.pharetra@protonmail.com','Ap #870-1045 Lectus, Ave'),
  ('Hunter Underwood','1-217-113-8562','laoreet@icloud.org','963-4548 Rhoncus St.');
\q

kubectl run postgresql-ha-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- pg_dump -h postgresql-ha-pgpool -p 5432 -U postgres > test-backup.sql
kubectl run postgresql-ha-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgresql-ha-pgpool -p 5432 -U postgres -c 'drop table "myTable";'
kubectl run postgresql-ha-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgresql-ha-pgpool -p 5432 -U postgres -c 'select * from "myTable";'
kubectl run postgresql-ha-client --rm -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgresql-ha-pgpool -p 5432 -U postgres < test-backup.sql
kubectl run postgresql-ha-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql-repmgr:15.2.0-debian-11-r2 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql -h postgresql-ha-pgpool -p 5432 -U postgres
select * from "myTable";
\q

### To trigger the alert:
helm uninstall postgresql-ha
## After a minute, the alert should be sent.